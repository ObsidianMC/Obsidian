using System.Runtime.InteropServices;

namespace Obsidian
{
    /// <summary>
    /// Native methods for Windows
    /// </summary>
    internal static class NativeMethods
    {
        /// <summary>
        /// An application-defined function used with the SetConsoleCtrlHandler function. A console process uses this function to handle control signals received by the process. When the signal is received, the system creates a new thread in the process to execute the function.
        ///
        /// The PHANDLER_ROUTINE type defines a pointer to this callback function. HandlerRoutine is a placeholder for the application-defined function name.
        /// </summary>
        /// <param name="dwCtrlType">The type of control signal received by the handler.</param>
        /// <returns>If the function handles the control signal, it should return TRUE. If it returns FALSE, the next handler function in the list of handlers for this process is used.</returns>
        internal delegate bool HandlerRoutine(CtrlType dwCtrlType);

        /// <summary>
        /// Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process.
        ///
        /// If no handler function is specified, the function sets an inheritable attribute that determines whether the calling process ignores CTRL+C signals.
        /// </summary>
        /// <param name="handlerRoutine">A pointer to the application-defined HandlerRoutine function to be added or removed. This parameter can be NULL.</param>
        /// <param name="add">
        /// If this parameter is TRUE, the handler is added; if it is FALSE, the handler is removed.
        /// 
        /// If the HandlerRoutine parameter is NULL, a TRUE value causes the calling process to ignore CTRL+C input, and a FALSE value restores normal processing of CTRL+C input. This attribute of ignoring or processing CTRL+C is inherited by child processes.
        /// </param>
        [DllImport("kernel32.dll")]
        internal static extern bool SetConsoleCtrlHandler(HandlerRoutine handlerRoutine, bool add);

        internal enum CtrlType
        {
            /// <summary>
            /// A CTRL+C signal was received, either from keyboard input or from a signal generated by the GenerateConsoleCtrlEvent function.
            /// </summary>
            CTRL_C_EVENT = 0,

            /// <summary>
            /// A CTRL+BREAK signal was received, either from keyboard input or from a signal generated by GenerateConsoleCtrlEvent.
            /// </summary>
            CTRL_BREAK_EVENT = 1,

            /// <summary>
            /// A signal that the system sends to all processes attached to a console when the user closes the console (either by clicking Close on the console window's window menu, or by clicking the End Task button command from Task Manager).
            /// </summary>
            CTRL_CLOSE_EVENT = 2,

            /// <summary>
            /// A signal that the system sends to all console processes when a user is logging off. This signal does not indicate which user is logging off, so no assumptions can be made.
            /// 
            /// Note that this signal is received only by services. Interactive applications are terminated at logoff, so they are not present when the system sends this signal.
            /// </summary>
            CTRL_LOGOFF_EVENT = 5,

            /// <summary>
            /// A signal that the system sends when the system is shutting down. Interactive applications are not present by the time the system sends this signal, therefore it can be received only be services in this situation. Services also have their own notification mechanism for shutdown events. For more information, see Handler.
            ///
            /// This signal can also be generated by an application using GenerateConsoleCtrlEvent.
            /// </summary>
            CTRL_SHUTDOWN_EVENT = 6
        }
    }
}
